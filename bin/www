// アプリケーション実行ファイル

/**
* 依存関係.
*/
const app = require('../app');
const http = require('http');
const debug = require('debug');
require('dotenv').config();

/**
 * PORT取得.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Serverオブジェクトの作成.
 */
const server = http.createServer(app);

/**
 * 待ち受けスタート.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }
    
    return false;
}

/**
 * errorイベントのイベントリスナー
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
              console.error(bind + ' requires elevated privileges');
              process.exit(1);
              break;
          case 'EADDRINUSE':
              console.error(bind + ' is already in use');
              process.exit(1);
              break;
          default:
              throw error;
    }
}


/**
 * listenイベントのイベントリスナー
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
}